#include <GLFW/glfw3.h>
#include <cmath>
#include <iostream>
#include <cstdio> // for snprintf

// 질량 개수
const int N = 3;
// 시뮬레이션 파라미터
const float k = 1.0f; // 스프링 상수
const float m = 1.0f; // 질량
const float dt = 0.01f;

float x[N] = { -0.5f, 0.0f, 0.5f };  // 초기 위치
float v[N] = { 0.0f, 0.0f, 0.0f };   // 초기 속도

// 창 크기
const int WIDTH = 800;
const int HEIGHT = 600;

// 라플라시안 행렬 정의
const float L[N][N] = {
    { 1, -1,  0 },
    { -1, 2, -1 },
    { 0, -1,  1 }
};

// 시뮬레이션 일시정지 플래그
bool simulationPaused = false;
// 질량 선택 인덱스 (0~N-1)
int selectedMass = 0;

// 키 입력 콜백 함수
void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (action == GLFW_PRESS || action == GLFW_REPEAT) {
        // 시뮬레이션 일시정지/재개 (Space)
        if (key == GLFW_KEY_SPACE) {
            simulationPaused = !simulationPaused;
            std::cout << (simulationPaused ? "Paused" : "Resumed") << std::endl;
        }
        // 초기화 (R)
        if (key == GLFW_KEY_R) {
            float initX[N] = { -0.5f, 0.0f, 0.5f };
            float initV[N] = { 0.0f, 0.0f, 0.0f };
            for (int i = 0; i < N; ++i) {
                x[i] = initX[i];
                v[i] = initV[i];
            }
            std::cout << "Reset positions and velocities." << std::endl;
        }
        // 질량 선택 (1,2,3)
        if (key == GLFW_KEY_1) selectedMass = 0;
        if (key == GLFW_KEY_2 && N > 1) selectedMass = 1;
        if (key == GLFW_KEY_3 && N > 2) selectedMass = 2;

        // 선택된 질량을 좌우로 이동 (←, →)
        if (key == GLFW_KEY_LEFT) {
            x[selectedMass] -= 0.05f;
            std::cout << "Moved mass " << selectedMass << " left." << std::endl;
        }
        if (key == GLFW_KEY_RIGHT) {
            x[selectedMass] += 0.05f;
            std::cout << "Moved mass " << selectedMass << " right." << std::endl;
        }
    }
}

void updatePositions() {
    float a[N] = { 0.0f };

    // a = -k/m * L * x
    for (int i = 0; i < N; i++) {
        float sum = 0.0f;
        for (int j = 0; j < N; j++) {
            sum += L[i][j] * x[j];
        }
        a[i] = -k * sum / m;
    }

    for (int i = 0; i < N; i++) {
        v[i] += a[i] * dt;
        x[i] += v[i] * dt;
    }
}

void render() {
    glClear(GL_COLOR_BUFFER_BIT);

    // 1차원 수평선 그리기 (y=0)
    glLineWidth(1);
    glColor3f(0.7f, 0.7f, 0.7f); // 연한 회색
    glBegin(GL_LINES);
    glVertex2f(-1.0f, 0.0f);
    glVertex2f(1.0f, 0.0f);
    glEnd();

    // 용수철(선) 그리기
    glLineWidth(3);
    glColor3f(0.8f, 0.8f, 0.2f); // 노란색
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i < N; i++) {
        glVertex2f(x[i], 0.0f);
    }
    glEnd();

    // 질량(점) 그리기
    glPointSize(20);
    glColor3f(0.2f, 0.7f, 1.0f); // 파란색
    glBegin(GL_POINTS);
    for (int i = 0; i < N; i++) {
        glVertex2f(x[i], 0.0f);
    }
    glEnd();

    // 색상 원복
    glColor3f(1.0f, 1.0f, 1.0f);
}

void printMassPositions() {
    std::cout << "Mass positions: ";
    for (int i = 0; i < N; i++) {
        std::cout << "x" << i << "=" << x[i];
        if (i < N - 1) std::cout << ", ";
    }
    std::cout << std::endl;
}

int main() {
    if (!glfwInit()) return -1;

    // OpenGL 2.1 컨텍스트 명시 (대부분의 시스템에서 기본값)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);

    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "3 Mass-Spring Simulation", NULL, NULL);
    if (!window) {
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    // 키 콜백 등록
    glfwSetKeyCallback(window, keyCallback);

    std::cout << "Controls:\n"
              << "  SPACE: Pause/Resume simulation\n"
              << "  R: Reset positions\n"
              << "  1/2/3: Select mass\n"
              << "  Left/Right Arrow: Move selected mass\n";

    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1, 1);

    while (!glfwWindowShouldClose(window)) {
        if (!simulationPaused) {
            updatePositions();
        }
        render();
        printMassPositions();
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
